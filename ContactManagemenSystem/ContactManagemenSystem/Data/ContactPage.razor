@page "/contactPage"
@using ContactManagemenSystem.Data
@inject ContactService contactService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@*Navigate to New Contact Component when Add New Contact link is clicked*@
<NavLink class="nav-link" href="NewContact">
    <h5 class="oi oi-plus" aria-hidden="true">Add New Contact</h5>
</NavLink>


@if (contacts == null)
{
    <hr />
    <h4>Loading...</h4>
}
else
{
    <table class="table" style="background-color:lightgray">
        <thead style="text-align: center; margin:auto">
            <tr>
                <th>Contact Id</th>
                <th><a href="contactPage" @onclick="sortFirstName">First Name</a></th>
                <th><a href="contactPage" @onclick="sortLastName">Last Name</a></th>
                <th>Phone Number</th>
                <th>Birth Date</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody style="text-align: center; margin:auto">
            @foreach (var contact in contacts)
            {
                <tr>
                    <td style="vertical-align: middle">@contact.Id</td>
                    <td style="vertical-align: middle">@contact.FirstName</td>
                    <td style="vertical-align: middle">@contact.LastName</td>
                    <td style="vertical-align: middle">@formatPhone(@contact.PhoneNumber)</td>
                    <td style="vertical-align: middle">@contact.BirthDate.Month / @contact.BirthDate.Day / @contact.BirthDate.Year</td>
                    <td style="vertical-align: middle">
                        <a class="nav-link" href="EditContact/@contact.Id">
                            <p class="oi oi-pencil" aria-hidden="true"></p>
                        </a>
                    </td>
                    <td style="vertical-align: middle">
                        <a class="nav-link" @onclick="(()=>Delete(contact))" href="">
                            <p class="oi oi-trash" aria-hidden="true"></p>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Contact> contacts;     //List of contacts

    //Retrieves contacts from database.
    protected override async Task OnInitializedAsync()
    {
        contacts = await Task.Run(() => contactService.getContact());
    }


    //Confirms contact deletion and if confirmed, calls method to delete a specific contact from database
    async Task Delete(Contact contact)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the contact '{contact.FirstName}'?"))
        {
            navigationManager.NavigateTo("contactPage");
            //return;
        }
        else
        {
            contactService.DeleteContact(contact);
            navigationManager.NavigateTo("contactPage");
        }



    }

    //Precondition: An existing list of contacts
    //Postcondition: Returns a sorted list of contacts according to last name
    public void sortLastName()
    {
        contacts = contacts.OrderBy(c => c.LastName).ToList();
    }

    //Precondition: An existing list of contacts
    //Postcondition: Returns a sorted list of contacts according to first name
    public void sortFirstName()
    {
        contacts = contacts.OrderBy(c => c.FirstName).ToList();
    }

    //Preconditon: A given phone number string in the format of "##########"
    //Postcondition: Returns a converted phone number string in the format of "(###) - ### - ####"
    public string formatPhone(string phoneNum)
    {
        string phoneFormat = "(###) - ### - ####";
        return Convert.ToInt64(phoneNum).ToString(phoneFormat);
    }
}
